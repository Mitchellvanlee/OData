//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetsD34F36937E4D33E5392603BD49BCDD0A))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySetsD34F36937E4D33E5392603BD49BCDD0A : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views
        /// </Summary>
        public ViewsForBaseEntitySetsD34F36937E4D33E5392603BD49BCDD0A()
        {
            this.EdmEntityContainerName = "CustomManyToManyContainer";
            this.StoreEntityContainerName = "dbo";
            this.HashOverMappingClosure = "599f7645919ad44d5939502b279cbe0e";
            this.HashOverAllExtentViews = "1ee6e5e474edf13588ce7e82ca96b992";
            this.ViewCount = 6;
        }
        
        // The method returns the view for the index given.
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                // return view for dbo.Persons
                return new System.Collections.Generic.KeyValuePair<string, string>("dbo.Persons", @"
    SELECT VALUE -- Constructing Persons
        [testModel.Store].Person(T1.Person_Id, T1.Person_Name)
    FROM (
        SELECT 
            T.Id AS Person_Id, 
            T.Name AS Person_Name, 
            True AS _from0
        FROM CustomManyToManyContainer.Persons AS T
    ) AS T1");
            }
            else
            {
                if ((index == 1))
                {
                    // return view for dbo.Homes
                    return new System.Collections.Generic.KeyValuePair<string, string>("dbo.Homes", @"
    SELECT VALUE -- Constructing Homes
        [testModel.Store].Home(T1.Home_Id, T1.Home_Address)
    FROM (
        SELECT 
            T.Id AS Home_Id, 
            T.Address AS Home_Address, 
            True AS _from0
        FROM CustomManyToManyContainer.Homes AS T
    ) AS T1");
                }
                else
                {
                    if ((index == 2))
                    {
                        // return view for dbo.Person_Home_Ownership
                        return new System.Collections.Generic.KeyValuePair<string, string>("dbo.Person_Home_Ownership", @"
    SELECT VALUE -- Constructing Person_Home_Ownership
        [testModel.Store].Person_Home_Ownership(T1.[Person_Home_Ownership.PersonId], T1.[Person_Home_Ownership.HomeId])
    FROM (
        SELECT 
            Key(T.Persons).Id AS [Person_Home_Ownership.PersonId], 
            Key(T.Homes).Id AS [Person_Home_Ownership.HomeId], 
            True AS _from0
        FROM CustomManyToManyContainer.Person_Home_Ownership AS T
    ) AS T1");
                    }
                    else
                    {
                        if ((index == 3))
                        {
                            // return view for CustomManyToManyContainer.Persons
                            return new System.Collections.Generic.KeyValuePair<string, string>("CustomManyToManyContainer.Persons", @"
    SELECT VALUE -- Constructing Persons
        [AstoriaUnitTests.ObjectContextStubs].Person(T1.Person_Id, T1.Person_Name)
    FROM (
        SELECT 
            T.Id AS Person_Id, 
            T.Name AS Person_Name, 
            True AS _from0
        FROM dbo.Persons AS T
    ) AS T1");
                        }
                        else
                        {
                            if ((index == 4))
                            {
                                // return view for CustomManyToManyContainer.Homes
                                return new System.Collections.Generic.KeyValuePair<string, string>("CustomManyToManyContainer.Homes", @"
    SELECT VALUE -- Constructing Homes
        [AstoriaUnitTests.ObjectContextStubs].Home(T1.Home_Id, T1.Home_Address)
    FROM (
        SELECT 
            T.Id AS Home_Id, 
            T.Address AS Home_Address, 
            True AS _from0
        FROM dbo.Homes AS T
    ) AS T1");
                            }
                            else
                            {
                                if ((index == 5))
                                {
                                    // return view for CustomManyToManyContainer.Person_Home_Ownership
                                    return new System.Collections.Generic.KeyValuePair<string, string>("CustomManyToManyContainer.Person_Home_Ownership", @"
    SELECT VALUE -- Constructing Person_Home_Ownership
        [AstoriaUnitTests.ObjectContextStubs].Person_Home_Ownership(T3.[Person_Home_Ownership.Persons], T3.[Person_Home_Ownership.Homes])
    FROM (
        SELECT -- Constructing Persons
            CreateRef(CustomManyToManyContainer.Persons, row(T2.[Person_Home_Ownership.Persons.Id]),[AstoriaUnitTests.ObjectContextStubs].Person) AS [Person_Home_Ownership.Persons], 
            T2.[Person_Home_Ownership.Homes]
        FROM (
            SELECT -- Constructing Homes
                CreateRef(CustomManyToManyContainer.Homes, row(T1.[Person_Home_Ownership.Homes.Id]),[AstoriaUnitTests.ObjectContextStubs].Home) AS [Person_Home_Ownership.Homes], 
                T1.[Person_Home_Ownership.Persons.Id]
            FROM (
                SELECT 
                    T.PersonId AS [Person_Home_Ownership.Persons.Id], 
                    T.HomeId AS [Person_Home_Ownership.Homes.Id], 
                    True AS _from0
                FROM dbo.Person_Home_Ownership AS T
            ) AS T1
        ) AS T2
    ) AS T3");
                                }
                            }
                        }
                    }
                }
            }
            throw new System.IndexOutOfRangeException();
        }
    }
}
