//---------------------------------------------------------------------
// <copyright file="SqlDataTypesContext.cs" company="Microsoft">
//      Copyright (C) Microsoft Corporation. All rights reserved. See License.txt in the project root for license information.
// </copyright>
//---------------------------------------------------------------------

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4918
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AstoriaUnitTests.DataTypesContext
{
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Data;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Linq;
    using System.Linq.Expressions;
    using System.ComponentModel;
    using System;


    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "TestDB")]
    public partial class SqlDataTypesContext : System.Data.Linq.DataContext
    {

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions
        partial void OnCreated();
        #endregion

        public SqlDataTypesContext() : this(DataTypesContext.EntityConnection.StoreConnection)
        {
        }

        private SqlDataTypesContext(string connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        private SqlDataTypesContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        private SqlDataTypesContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        private SqlDataTypesContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public System.Data.Linq.Table<DataType> DataTypes
        {
            get
            {
                return this.GetTable<DataType>();
            }
        }
    }

    [Table(Name = "#DataTypes")]
    public partial class DataType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private System.Nullable<int> _Integer;

        private System.Nullable<double> _Float;

        private System.Nullable<decimal> _Decimal;

        private string _String;

        private System.Nullable<System.DateTime> _Date;

        private System.Nullable<bool> _Boolean;

        private System.Nullable<System.Guid> _UniqueId;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnIntegerChanging(System.Nullable<int> value);
        partial void OnIntegerChanged();
        partial void OnFloatChanging(System.Nullable<double> value);
        partial void OnFloatChanged();
        partial void OnDecimalChanging(System.Nullable<decimal> value);
        partial void OnDecimalChanged();
        partial void OnStringChanging(string value);
        partial void OnStringChanged();
        partial void OnDateChanging(System.Nullable<System.DateTime> value);
        partial void OnDateChanged();
        partial void OnBooleanChanging(System.Nullable<bool> value);
        partial void OnBooleanChanged();
        partial void OnUniqueIdChanging(System.Nullable<System.Guid> value);
        partial void OnUniqueIdChanged();
        #endregion

        public DataType()
        {
            OnCreated();
        }

        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [Column(Storage = "_Integer", DbType = "Int")]
        public System.Nullable<int> Integer
        {
            get
            {
                return this._Integer;
            }
            set
            {
                if ((this._Integer != value))
                {
                    this.OnIntegerChanging(value);
                    this.SendPropertyChanging();
                    this._Integer = value;
                    this.SendPropertyChanged("Integer");
                    this.OnIntegerChanged();
                }
            }
        }

        [Column(Storage = "_Float", DbType = "Float")]
        public System.Nullable<double> Float
        {
            get
            {
                return this._Float;
            }
            set
            {
                if ((this._Float != value))
                {
                    this.OnFloatChanging(value);
                    this.SendPropertyChanging();
                    this._Float = value;
                    this.SendPropertyChanged("Float");
                    this.OnFloatChanged();
                }
            }
        }

        [Column(Storage = "_Decimal", DbType = "Decimal(18,0)")]
        public System.Nullable<decimal> Decimal
        {
            get
            {
                return this._Decimal;
            }
            set
            {
                if ((this._Decimal != value))
                {
                    this.OnDecimalChanging(value);
                    this.SendPropertyChanging();
                    this._Decimal = value;
                    this.SendPropertyChanged("Decimal");
                    this.OnDecimalChanged();
                }
            }
        }

        [Column(Storage = "_String", DbType = "NVarChar(MAX)")]
        public string String
        {
            get
            {
                return this._String;
            }
            set
            {
                if ((this._String != value))
                {
                    this.OnStringChanging(value);
                    this.SendPropertyChanging();
                    this._String = value;
                    this.SendPropertyChanged("String");
                    this.OnStringChanged();
                }
            }
        }

        [Column(Storage = "_Date", DbType = "DateTime")]
        public System.Nullable<System.DateTime> Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this.OnDateChanging(value);
                    this.SendPropertyChanging();
                    this._Date = value;
                    this.SendPropertyChanged("Date");
                    this.OnDateChanged();
                }
            }
        }

        [Column(Storage = "_Boolean", DbType = "Bit")]
        public System.Nullable<bool> Boolean
        {
            get
            {
                return this._Boolean;
            }
            set
            {
                if ((this._Boolean != value))
                {
                    this.OnBooleanChanging(value);
                    this.SendPropertyChanging();
                    this._Boolean = value;
                    this.SendPropertyChanged("Boolean");
                    this.OnBooleanChanged();
                }
            }
        }

        [Column(Storage = "_UniqueId", DbType = "UniqueIdentifier")]
        public System.Nullable<System.Guid> UniqueId
        {
            get
            {
                return this._UniqueId;
            }
            set
            {
                if ((this._UniqueId != value))
                {
                    this.OnUniqueIdChanging(value);
                    this.SendPropertyChanging();
                    this._UniqueId = value;
                    this.SendPropertyChanged("UniqueId");
                    this.OnUniqueIdChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
#pragma warning restore 1591
