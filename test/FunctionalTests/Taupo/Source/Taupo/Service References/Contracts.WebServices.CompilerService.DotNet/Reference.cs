//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.21105.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Test.Taupo.Contracts.WebServices.CompilerService.DotNet {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Contracts.WebServices.CompilerService.DotNet.ICompilerService")]
    public interface ICompilerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompilerService/CompileAssembly", ReplyAction="http://tempuri.org/ICompilerService/CompileAssemblyResponse")]
        byte[] CompileAssembly(out string errorLog, string projectType, string sourceFileExtension, string projectFileExtension, string outputAssemblyName, string[] sources, string[] referenceAssemblies);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICompilerService/CompileAssembly", ReplyAction="http://tempuri.org/ICompilerService/CompileAssemblyResponse")]
        System.IAsyncResult BeginCompileAssembly(string projectType, string sourceFileExtension, string projectFileExtension, string outputAssemblyName, string[] sources, string[] referenceAssemblies, System.AsyncCallback callback, object asyncState);
        
        byte[] EndCompileAssembly(out string errorLog, System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICompilerServiceChannel : Microsoft.Test.Taupo.Contracts.WebServices.CompilerService.DotNet.ICompilerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CompileAssemblyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CompileAssemblyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errorLog {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CompilerServiceClient : System.ServiceModel.ClientBase<Microsoft.Test.Taupo.Contracts.WebServices.CompilerService.DotNet.ICompilerService>, Microsoft.Test.Taupo.Contracts.WebServices.CompilerService.DotNet.ICompilerService {
        
        private BeginOperationDelegate onBeginCompileAssemblyDelegate;
        
        private EndOperationDelegate onEndCompileAssemblyDelegate;
        
        private System.Threading.SendOrPostCallback onCompileAssemblyCompletedDelegate;
        
        public CompilerServiceClient() {
        }
        
        public CompilerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CompilerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CompilerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CompilerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<CompileAssemblyCompletedEventArgs> CompileAssemblyCompleted;
        
        public byte[] CompileAssembly(out string errorLog, string projectType, string sourceFileExtension, string projectFileExtension, string outputAssemblyName, string[] sources, string[] referenceAssemblies) {
            return base.Channel.CompileAssembly(out errorLog, projectType, sourceFileExtension, projectFileExtension, outputAssemblyName, sources, referenceAssemblies);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCompileAssembly(string projectType, string sourceFileExtension, string projectFileExtension, string outputAssemblyName, string[] sources, string[] referenceAssemblies, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCompileAssembly(projectType, sourceFileExtension, projectFileExtension, outputAssemblyName, sources, referenceAssemblies, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public byte[] EndCompileAssembly(out string errorLog, System.IAsyncResult result) {
            return base.Channel.EndCompileAssembly(out errorLog, result);
        }
        
        private System.IAsyncResult OnBeginCompileAssembly(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string projectType = ((string)(inValues[0]));
            string sourceFileExtension = ((string)(inValues[1]));
            string projectFileExtension = ((string)(inValues[2]));
            string outputAssemblyName = ((string)(inValues[3]));
            string[] sources = ((string[])(inValues[4]));
            string[] referenceAssemblies = ((string[])(inValues[5]));
            return this.BeginCompileAssembly(projectType, sourceFileExtension, projectFileExtension, outputAssemblyName, sources, referenceAssemblies, callback, asyncState);
        }
        
        private object[] OnEndCompileAssembly(System.IAsyncResult result) {
            string errorLog = this.GetDefaultValueForInitialization<string>();
            byte[] retVal = this.EndCompileAssembly(out errorLog, result);
            return new object[] {
                    errorLog,
                    retVal};
        }
        
        private void OnCompileAssemblyCompleted(object state) {
            if ((this.CompileAssemblyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CompileAssemblyCompleted(this, new CompileAssemblyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CompileAssemblyAsync(string projectType, string sourceFileExtension, string projectFileExtension, string outputAssemblyName, string[] sources, string[] referenceAssemblies) {
            this.CompileAssemblyAsync(projectType, sourceFileExtension, projectFileExtension, outputAssemblyName, sources, referenceAssemblies, null);
        }
        
        public void CompileAssemblyAsync(string projectType, string sourceFileExtension, string projectFileExtension, string outputAssemblyName, string[] sources, string[] referenceAssemblies, object userState) {
            if ((this.onBeginCompileAssemblyDelegate == null)) {
                this.onBeginCompileAssemblyDelegate = new BeginOperationDelegate(this.OnBeginCompileAssembly);
            }
            if ((this.onEndCompileAssemblyDelegate == null)) {
                this.onEndCompileAssemblyDelegate = new EndOperationDelegate(this.OnEndCompileAssembly);
            }
            if ((this.onCompileAssemblyCompletedDelegate == null)) {
                this.onCompileAssemblyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCompileAssemblyCompleted);
            }
            base.InvokeAsync(this.onBeginCompileAssemblyDelegate, new object[] {
                        projectType,
                        sourceFileExtension,
                        projectFileExtension,
                        outputAssemblyName,
                        sources,
                        referenceAssemblies}, this.onEndCompileAssemblyDelegate, this.onCompileAssemblyCompletedDelegate, userState);
        }
    }
}
