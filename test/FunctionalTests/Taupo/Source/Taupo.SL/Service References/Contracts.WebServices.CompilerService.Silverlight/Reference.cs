//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.21105.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40818.0
// 
namespace Microsoft.Test.Taupo.Contracts.WebServices.CompilerService.Silverlight {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Contracts.WebServices.CompilerService.Silverlight.ICompilerService")]
    public interface ICompilerService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICompilerService/CompileAssembly", ReplyAction="http://tempuri.org/ICompilerService/CompileAssemblyResponse")]
        System.IAsyncResult BeginCompileAssembly(string projectType, string sourceFileExtension, string projectFileExtension, string outputAssemblyName, string[] sources, string[] referenceAssemblies, System.AsyncCallback callback, object asyncState);
        
        byte[] EndCompileAssembly(out string errorLog, System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICompilerServiceChannel : Microsoft.Test.Taupo.Contracts.WebServices.CompilerService.Silverlight.ICompilerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CompileAssemblyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CompileAssemblyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errorLog {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CompilerServiceClient : System.ServiceModel.ClientBase<Microsoft.Test.Taupo.Contracts.WebServices.CompilerService.Silverlight.ICompilerService>, Microsoft.Test.Taupo.Contracts.WebServices.CompilerService.Silverlight.ICompilerService {
        
        private BeginOperationDelegate onBeginCompileAssemblyDelegate;
        
        private EndOperationDelegate onEndCompileAssemblyDelegate;
        
        private System.Threading.SendOrPostCallback onCompileAssemblyCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public CompilerServiceClient() {
        }
        
        public CompilerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CompilerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CompilerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CompilerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<CompileAssemblyCompletedEventArgs> CompileAssemblyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microsoft.Test.Taupo.Contracts.WebServices.CompilerService.Silverlight.ICompilerService.BeginCompileAssembly(string projectType, string sourceFileExtension, string projectFileExtension, string outputAssemblyName, string[] sources, string[] referenceAssemblies, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCompileAssembly(projectType, sourceFileExtension, projectFileExtension, outputAssemblyName, sources, referenceAssemblies, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] Microsoft.Test.Taupo.Contracts.WebServices.CompilerService.Silverlight.ICompilerService.EndCompileAssembly(out string errorLog, System.IAsyncResult result) {
            return base.Channel.EndCompileAssembly(out errorLog, result);
        }
        
        private System.IAsyncResult OnBeginCompileAssembly(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string projectType = ((string)(inValues[0]));
            string sourceFileExtension = ((string)(inValues[1]));
            string projectFileExtension = ((string)(inValues[2]));
            string outputAssemblyName = ((string)(inValues[3]));
            string[] sources = ((string[])(inValues[4]));
            string[] referenceAssemblies = ((string[])(inValues[5]));
            return ((Microsoft.Test.Taupo.Contracts.WebServices.CompilerService.Silverlight.ICompilerService)(this)).BeginCompileAssembly(projectType, sourceFileExtension, projectFileExtension, outputAssemblyName, sources, referenceAssemblies, callback, asyncState);
        }
        
        private object[] OnEndCompileAssembly(System.IAsyncResult result) {
            string errorLog = this.GetDefaultValueForInitialization<string>();
            byte[] retVal = ((Microsoft.Test.Taupo.Contracts.WebServices.CompilerService.Silverlight.ICompilerService)(this)).EndCompileAssembly(out errorLog, result);
            return new object[] {
                    errorLog,
                    retVal};
        }
        
        private void OnCompileAssemblyCompleted(object state) {
            if ((this.CompileAssemblyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CompileAssemblyCompleted(this, new CompileAssemblyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CompileAssemblyAsync(string projectType, string sourceFileExtension, string projectFileExtension, string outputAssemblyName, string[] sources, string[] referenceAssemblies) {
            this.CompileAssemblyAsync(projectType, sourceFileExtension, projectFileExtension, outputAssemblyName, sources, referenceAssemblies, null);
        }
        
        public void CompileAssemblyAsync(string projectType, string sourceFileExtension, string projectFileExtension, string outputAssemblyName, string[] sources, string[] referenceAssemblies, object userState) {
            if ((this.onBeginCompileAssemblyDelegate == null)) {
                this.onBeginCompileAssemblyDelegate = new BeginOperationDelegate(this.OnBeginCompileAssembly);
            }
            if ((this.onEndCompileAssemblyDelegate == null)) {
                this.onEndCompileAssemblyDelegate = new EndOperationDelegate(this.OnEndCompileAssembly);
            }
            if ((this.onCompileAssemblyCompletedDelegate == null)) {
                this.onCompileAssemblyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCompileAssemblyCompleted);
            }
            base.InvokeAsync(this.onBeginCompileAssemblyDelegate, new object[] {
                        projectType,
                        sourceFileExtension,
                        projectFileExtension,
                        outputAssemblyName,
                        sources,
                        referenceAssemblies}, this.onEndCompileAssemblyDelegate, this.onCompileAssemblyCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Microsoft.Test.Taupo.Contracts.WebServices.CompilerService.Silverlight.ICompilerService CreateChannel() {
            return new CompilerServiceClientChannel(this);
        }
        
        private class CompilerServiceClientChannel : ChannelBase<Microsoft.Test.Taupo.Contracts.WebServices.CompilerService.Silverlight.ICompilerService>, Microsoft.Test.Taupo.Contracts.WebServices.CompilerService.Silverlight.ICompilerService {
            
            public CompilerServiceClientChannel(System.ServiceModel.ClientBase<Microsoft.Test.Taupo.Contracts.WebServices.CompilerService.Silverlight.ICompilerService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginCompileAssembly(string projectType, string sourceFileExtension, string projectFileExtension, string outputAssemblyName, string[] sources, string[] referenceAssemblies, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = projectType;
                _args[1] = sourceFileExtension;
                _args[2] = projectFileExtension;
                _args[3] = outputAssemblyName;
                _args[4] = sources;
                _args[5] = referenceAssemblies;
                System.IAsyncResult _result = base.BeginInvoke("CompileAssembly", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndCompileAssembly(out string errorLog, System.IAsyncResult result) {
                object[] _args = new object[1];
                byte[] _result = ((byte[])(base.EndInvoke("CompileAssembly", _args, result)));
                errorLog = ((string)(_args[0]));
                return _result;
            }
        }
    }
}
